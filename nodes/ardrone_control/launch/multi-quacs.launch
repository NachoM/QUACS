<?xml version="1.0"?>

<launch>

<arg name="joy" default="true" />
<arg name="gps" default="false" />
<arg name="bag" default="true" />
<arg name="completo" default="false" />

<!-- Start Gazebo with wg world running in (max) realtime -->
<arg name="gui" default="true"/>
<param name="/use_sim_time" value="true" />

<!-- TUM Gazebo Simulator -->
<include file="$(find multi_cvg_sim_test)/launch/multi_uav_3boxes_room.launch"/> 


<!-- Start rviz visualization with preset config  -->
<node pkg="rviz" type="rviz" name="rviz" args="-d $(find multi_cvg_sim_test)/rviz_cfg/outdoor_flight.vcg"/>

<group ns="drone_1"> 
        <param name="tf_prefix" type="string" value="drone_1"/>
	<!-- include record files -->
	<arg name="record" default="false" />
	<include file="$(find ardrone_control)/launch/record.launch" if="$(arg record)"/>

	<!-- include realtime plot -->
	<arg name="plot" default="false" /> 
	<include file="$(find ardrone_control)/launch/plots.launch" if="$(arg plot)"/>	

	<!-- Load PID parameters -->
	<rosparam file="$(find ardrone_control)/parameters/PID_Parameters.yaml" command="load" />
	<!-- Load Filter parameters -->
	<rosparam file="$(find ardrone_control)/parameters/Filter_Parameters.yaml" command="load" />
	
	<!-- rosrun ardrone_control pkg-->
	<!-- 
	<group ns="Control"> 
	-->
		<!-- rosrun Estimator -->
		<node name="Estimator" 
			pkg="ardrone_control" 
			type="FilteredOdometry.py" respawn="false" output="screen"  />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun Controller -->
		<node name="Controller" 
			pkg="ardrone_control" 
			type="ROS_PIDController.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun StateHandling -->
		<node name="StateHandler" 
			pkg="ardrone_control" 
			type="keyboardControl.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
	<!-- 
	</group>
	-->

</group>

<group ns="drone_2"> 
        <param name="tf_prefix" type="string" value="drone_2"/>
	<!-- include record files -->
	<arg name="record" default="false" />
	<include file="$(find ardrone_control)/launch/record.launch" if="$(arg record)"/>

	<!-- include realtime plot -->
	<arg name="plot" default="false" /> 
	<include file="$(find ardrone_control)/launch/plots.launch" if="$(arg plot)"/>	

	<!-- Load PID parameters -->
	<rosparam file="$(find ardrone_control)/parameters/PID_Parameters.yaml" command="load" />
	<!-- Load Filter parameters -->
	<rosparam file="$(find ardrone_control)/parameters/Filter_Parameters.yaml" command="load" />
	
	<!-- rosrun ardrone_control pkg-->
	<!-- 
	<group ns="Control"> 
	-->
		<!-- rosrun Estimator -->
		<node name="Estimator" 
			pkg="ardrone_control" 
			type="FilteredOdometry.py" respawn="false" output="screen"  />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun Controller -->
		<node name="Controller" 
			pkg="ardrone_control" 
			type="ROS_PIDController.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun StateHandling -->
		<node name="StateHandler" 
			pkg="ardrone_control" 
			type="keyboardControl.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
	<!-- 
	</group>
	-->

</group>

<group ns="drone_3"> 
        <param name="tf_prefix" type="string" value="drone_3"/>
	<!-- include record files -->
	<arg name="record" default="false" />
	<include file="$(find ardrone_control)/launch/record.launch" if="$(arg record)"/>

	<!-- include realtime plot -->
	<arg name="plot" default="false" /> 
	<include file="$(find ardrone_control)/launch/plots.launch" if="$(arg plot)"/>	

	<!-- Load PID parameters -->
	<rosparam file="$(find ardrone_control)/parameters/PID_Parameters.yaml" command="load" />
	<!-- Load Filter parameters -->
	<rosparam file="$(find ardrone_control)/parameters/Filter_Parameters.yaml" command="load" />
	
	<!-- rosrun ardrone_control pkg-->
	<!-- 
	<group ns="Control"> 
	-->
		<!-- rosrun Estimator -->
		<node name="Estimator" 
			pkg="ardrone_control" 
			type="FilteredOdometry.py" respawn="false" output="screen"  />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun Controller -->
		<node name="Controller" 
			pkg="ardrone_control" 
			type="ROS_PIDController.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
		<!-- rosrun StateHandling -->
		<node name="StateHandler" 
			pkg="ardrone_control" 
			type="keyboardControl.py" respawn="false" output="screen" />
			<!--<param name="~tf_prefix" type="string" value="drone_1"/>-->
	<!-- 
	</group>
	-->

</group>



<group if="$(arg joy)">
        <!-- setting up joystick telecommand -->
	<include file="$(find multi-ardrone_joystick)/launch/teleop.launch">
	</include>
</group>

<group ns="drone_1"> 
   <node name="gps_from_ground_truth" pkg="integrated_navigation" type="generate_gps_from_ground_truth.py"/>
<!--   <node name="gps_signal_in_local_frame" pkg="integrated_navigation" type="publish_gps_in_local_frame.py">
     <param name="~tf_prefix" value="drone_1" />
   </node>  -->
</group>
<!-- generation of gps from ground truth  -->

<node name="gps_from_ground_truth" pkg="integrated_navigation" type="generate_gps_from_ground_truth.py" ns="drone_2"/>
<node name="gps_from_ground_truth" pkg="integrated_navigation" type="generate_gps_from_ground_truth.py" ns="drone_3"/>


</launch>
