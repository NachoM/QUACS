/* Auto-generated by genmsg_cpp for file /home/parallels/ros_fuerte_ws/nodes/ardrone_control/srv/Signal.srv */
#ifndef ARDRONE_CONTROL_SERVICE_SIGNAL_H
#define ARDRONE_CONTROL_SERVICE_SIGNAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ardrone_control
{
template <class ContainerAllocator>
struct SignalRequest_ {
  typedef SignalRequest_<ContainerAllocator> Type;

  SignalRequest_()
  : signal()
  , direction()
  , time(0.0)
  , dt(0.0)
  , f(0.0)
  {
  }

  SignalRequest_(const ContainerAllocator& _alloc)
  : signal(_alloc)
  , direction(_alloc)
  , time(0.0)
  , dt(0.0)
  , f(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _signal_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  signal;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  direction;

  typedef double _time_type;
  double time;

  typedef double _dt_type;
  double dt;

  typedef double _f_type;
  double f;


  typedef boost::shared_ptr< ::ardrone_control::SignalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_control::SignalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SignalRequest
typedef  ::ardrone_control::SignalRequest_<std::allocator<void> > SignalRequest;

typedef boost::shared_ptr< ::ardrone_control::SignalRequest> SignalRequestPtr;
typedef boost::shared_ptr< ::ardrone_control::SignalRequest const> SignalRequestConstPtr;


template <class ContainerAllocator>
struct SignalResponse_ {
  typedef SignalResponse_<ContainerAllocator> Type;

  SignalResponse_()
  {
  }

  SignalResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ardrone_control::SignalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_control::SignalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SignalResponse
typedef  ::ardrone_control::SignalResponse_<std::allocator<void> > SignalResponse;

typedef boost::shared_ptr< ::ardrone_control::SignalResponse> SignalResponsePtr;
typedef boost::shared_ptr< ::ardrone_control::SignalResponse const> SignalResponseConstPtr;

struct Signal
{

typedef SignalRequest Request;
typedef SignalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Signal
} // namespace ardrone_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_control::SignalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_control::SignalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_control::SignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c331ab0422e603181748d1d753651531";
  }

  static const char* value(const  ::ardrone_control::SignalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc331ab0422e60318ULL;
  static const uint64_t static_value2 = 0x1748d1d753651531ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_control::SignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_control/SignalRequest";
  }

  static const char* value(const  ::ardrone_control::SignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_control::SignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string signal\n\
string direction\n\
float64 time\n\
float64 dt\n\
float64 f\n\
\n\
";
  }

  static const char* value(const  ::ardrone_control::SignalRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_control::SignalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_control::SignalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_control::SignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ardrone_control::SignalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_control::SignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_control/SignalResponse";
  }

  static const char* value(const  ::ardrone_control::SignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_control::SignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ardrone_control::SignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone_control::SignalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_control::SignalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.signal);
    stream.next(m.direction);
    stream.next(m.time);
    stream.next(m.dt);
    stream.next(m.f);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SignalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_control::SignalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SignalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ardrone_control::Signal> {
  static const char* value() 
  {
    return "c331ab0422e603181748d1d753651531";
  }

  static const char* value(const ardrone_control::Signal&) { return value(); } 
};

template<>
struct DataType<ardrone_control::Signal> {
  static const char* value() 
  {
    return "ardrone_control/Signal";
  }

  static const char* value(const ardrone_control::Signal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone_control::SignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c331ab0422e603181748d1d753651531";
  }

  static const char* value(const ardrone_control::SignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone_control::SignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_control/Signal";
  }

  static const char* value(const ardrone_control::SignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ardrone_control::SignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c331ab0422e603181748d1d753651531";
  }

  static const char* value(const ardrone_control::SignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ardrone_control::SignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_control/Signal";
  }

  static const char* value(const ardrone_control::SignalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARDRONE_CONTROL_SERVICE_SIGNAL_H

